# Case Description:
#   learner send two successive notify_learn_completion request

set:load_balance_for_test=1,not_exit_on_log_failure=1

# wait primary to add r3 as learner
state:{{r1,pri,2,0},{r2,sec,2,0},{r3,pot,2,0}}

# r3 learn from r1 successfully, and notify r1, but the message lost
inject:on_rpc_call:rpc_name=RPC_LEARN_COMPLETION_NOTIFY,from=r3,to=r1

# then client start to write, and the prepare message to r2 lost
client:begin_write:id=1,key=k1,timeout=0
inject:on_rpc_call:rpc_name=RPC_PREPARE,from=r1,to=r2

# r1 will remove r2 due to prepare timeout
config:{3,r1,[]}

# after r1 update config, it will broad group_check, so r3
# will receive group_check as a learner
wait:on_rpc_call:rpc_name=RPC_GROUP_CHECK,from=r1,to=r3

# after r3 receive the group check, it will update its ballot: 2->3.
# r2 will become learner some while later
state:{{r1,pri,3,0},{r2,pot,3,0},{r3,pot,3,0}}

# both r2 & r2 will be secondary eventually
config:{5,r1,[r2,r3]}

