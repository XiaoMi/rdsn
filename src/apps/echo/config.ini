[apps..default]
; arguments for the app instances
arguments = 

; count of app instances for this type (ports are automatically calculated accordingly to avoid confliction)
count = 1

; delay seconds for when the apps should be started
delay_seconds = 0

; path of a dynamic library which implement this app role, and register itself upon loaded
dmodule = 

; thread pools need to be started
pools = 

; RPC server listening ports needed for this app
ports = 

; whether to run the app instances or not
run = true

; app type name, as given when registering by dsn_register_app_role
type = 


[apps.client]
; arguments for the app instances
arguments = localhost 27001

; count of app instances for this type (ports are automatically calculated accordingly to avoid confliction)
count = 0

; delay seconds for when the apps should be started
delay_seconds = 0

; path of a dynamic library which implement this app role, and register itself upon loaded
dmodule = 

; 

; thread pools need to be started
pools = THREAD_POOL_DEFAULT

; RPC server listening ports needed for this app
ports = 

; whether to run the app instances or not
run = true

; app type name, as given when registering by dsn_register_app_role
type = client


[apps.client.perf.echo]
; arguments for the app instances
arguments = localhost 27001

; count of app instances for this type (ports are automatically calculated accordingly to avoid confliction)
count = 1

; delay seconds for when the apps should be started
delay_seconds = 0

; path of a dynamic library which implement this app role, and register itself upon loaded
dmodule = 

; 

; thread pools need to be started
pools = THREAD_POOL_DEFAULT

; RPC server listening ports needed for this app
ports = 

; whether to run the app instances or not
run = true

; app type name, as given when registering by dsn_register_app_role
type = client.perf.echo


[apps.server]
; arguments for the app instances
arguments = 

; count of app instances for this type (ports are automatically calculated accordingly to avoid confliction)
count = 1

; delay seconds for when the apps should be started
delay_seconds = 0

; path of a dynamic library which implement this app role, and register itself upon loaded
dmodule = 

; 

; thread pools need to be started
pools = THREAD_POOL_DEFAULT

; RPC server listening ports needed for this app
ports = 27001

; whether to run the app instances or not
run = true

; app type name, as given when registering by dsn_register_app_role
type = server


[core]
; aio aspect providers, usually for tooling purpose
aio_aspects = 

; asynchonous file system provider
aio_factory_name = 

; whether to enable local command line interface (cli)
cli_local = false

; whether to enable remote command line interface (using dsn.cli)
cli_remote = false

; where to put the core dump files
coredump_dir = ./coredump

; how many disk engines? IOE_PER_NODE, or IOE_PER_QUEUE
disk_io_mode = 

; environment aspect providers, usually for tooling purpose
env_aspects = 

; environment provider
env_factory_name = 

; io thread count, only for IOE_PER_NODE; for IOE_PER_QUEUE, task workers are served as io threads
io_worker_count = 2

; recursive lock aspect providers, usually for tooling purpose
lock_aspects = 

; recursive exclusive lock provider
lock_factory_name = 

; non-recurisve lock aspect providers, usually for tooling purpose
lock_nr_aspects = 

; non-recurisve exclusive lock provider
lock_nr_factory_name = 

; logs with level below this will not be logged
;logging_start_level = LOG_LEVEL_INFORMATION
logging_start_level = LOG_LEVEL_WARNING

; logging provider
; logging_factory_name = dsn::tools::screen_logger
; logging_factory_name = dsn::tools::hpc_tail_logger
logging_factory_name = dsn::tools::simple_logger

; memory management provider
memory_factory_name = 

; network aspect providers, usually for tooling purpose
network_aspects = 

; nfs provider
nfs_factory_name = 

; how many nfs engines? IOE_PER_NODE, or IOE_PER_QUEUE
nfs_io_mode = 

; whether to pause at startup time for easier debugging
pause_on_start = false

; peformance counter provider
perf_counter_factory_name = 

; how many rpc engines? IOE_PER_NODE, or IOE_PER_QUEUE
rpc_io_mode = 

; non-recursive rwlock aspect providers, usually for tooling purpose
rwlock_nr_aspects = 

; non-recurisve rwlock provider
rwlock_nr_factory_name = 

; semaphore aspect providers, usually for tooling purpose
semaphore_aspects = 

; semaphore provider
semaphore_factory_name = 

; whether to start nfs
start_nfs = false

; timer service aspect providers, usually for tooling purpose
timer_aspects = 

; timer service provider
timer_factory_name = 

; how many disk timer services? IOE_PER_NODE, or IOE_PER_QUEUE
timer_io_mode = 

; use what tool to run this process, e.g., native or simulator
tool = nativerun

; use what toollets, e.g., tracer, profiler, fault_injector
toollets = 

; memory management provider for tools
tools_memory_factory_name = 


[network]
; thread number for io service (timer and boost network)
io_service_worker_count = 2

; whether crc is enabled for network messages
message_crc_required = false


[task..default]
; whether the task can be executed inlined with the caller task
allow_inline = false


; 
is_profile = true

; 
is_trace = true

; byte size of each rpc request test
perf_test_payload_bytes = 

; timeout (ms) for each rpc call
perf_test_timeouts_ms = 

; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = RPC_CHANNEL_TCP

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; 
rpc_call_header_format_name = dsn

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_AIO_IMMEDIATE_CALLBACK]
; 
allow_inline = false

; 
is_profile = false

; 
is_trace = false


[task.LPC_CONTROL_SERVICE_APP]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_ECHO_TEST_TIMER]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_NATIVE_AIO_REDIRECT]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_NFS_COPY_FILE]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_NFS_FILE_CLOSE_TIMER]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_NFS_READ]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_NFS_REQUEST_TIMER]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_NFS_WRITE]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.LPC_RPC_TIMEOUT]
; whether the task can be executed inlined with the caller task
allow_inline = false


; 
is_profile = false

; 
is_trace = false

; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.RPC_DSN_CLI_CALL]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.RPC_DSN_CLI_CALL_ACK]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.RPC_ECHO_ECHO_PING]
; whether the task can be executed inlined with the caller task
allow_inline = false


; byte size of each rpc request test
perf_test_payload_bytes = 

; timeout (ms) for each rpc call
perf_test_timeouts_ms = 

; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.RPC_ECHO_ECHO_PING_ACK]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.RPC_NFS_COPY]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.RPC_NFS_COPY_ACK]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.RPC_NFS_GET_FILE_SIZE]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[task.RPC_NFS_GET_FILE_SIZE_ACK]
; whether the task can be executed inlined with the caller task
allow_inline = false


; thread pool to execute the task
pool_code = 

; task priority
priority = 

; what kind of network channel for this kind of rpc calls
rpc_call_channel = 

; what kind of header format for this kind of rpc calls
rpc_call_header_format = 

; what is the default timeout (ms) for this kind of rpc calls
rpc_timeout_milliseconds = 5000


[threadpool..default]
; arguments for the cusotmized admission controller
admission_controller_arguments = 

; customized admission controller for the task queues
admission_controller_factory_name = 

; maximum (each) task queue length for this pool
max_input_queue_length = 4294967295

; thread pool name

; whethe the threads share a single queue(partitioned=false) or not; the latter is usually for workload hash partitioning for avoiding locking
partitioned = false

; task queue aspects names, usually for tooling purpose
queue_aspects = 

; task queue provider name
queue_factory_name = hpc_task_queue

; what CPU cores are assigned to this pool, 0 for all
worker_affinity_mask = 0

; Tas aspects names, usually for tooling purpose
worker_aspects = 

; thread/worker count
worker_count = 8

; task worker provider name
worker_factory_name = 

; thread priority
worker_priority = 

; whether the threads share all assigned cores
worker_share_core = true


[threadpool.THREAD_POOL_DEFAULT]
; arguments for the cusotmized admission controller
admission_controller_arguments = 

; customized admission controller for the task queues
admission_controller_factory_name = 

; maximum (each) task queue length for this pool
max_input_queue_length = 1024

; thread pool name

; whethe the threads share a single queue(partitioned=false) or not; the latter is usually for workload hash partitioning for avoiding locking
partitioned = false

; task queue aspects names, usually for tooling purpose
queue_aspects = 

; task queue provider name
queue_factory_name = 

; what CPU cores are assigned to this pool, 0 for all
worker_affinity_mask = 0

; Tas aspects names, usually for tooling purpose
worker_aspects = 

; thread/worker count
worker_count = 8

; task worker provider name
worker_factory_name = 

; thread priority
worker_priority = THREAD_xPRIORITY_NORMAL

; whether the threads share all assigned cores
worker_share_core = true


[threadpool.THREAD_POOL_INVALID]
; arguments for the cusotmized admission controller
admission_controller_arguments = 

; customized admission controller for the task queues
admission_controller_factory_name = 

; maximum (each) task queue length for this pool
max_input_queue_length = 4294967295

; thread pool name

; whethe the threads share a single queue(partitioned=false) or not; the latter is usually for workload hash partitioning for avoiding locking
partitioned = false

; task queue aspects names, usually for tooling purpose
queue_aspects = 

; task queue provider name
queue_factory_name = 

; what CPU cores are assigned to this pool, 0 for all
worker_affinity_mask = 0

; Tas aspects names, usually for tooling purpose
worker_aspects = 

; thread/worker count
worker_count = 2

; task worker provider name
worker_factory_name = 

; thread priority
worker_priority = 

; whether the threads share all assigned cores
worker_share_core = true


[tools.simulator]
; 
random_seed = 0


